<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.yifushidai</groupId>
  <artifactId>lock-rent-v0.02</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <modules>
    <module>lock-web</module>
    <module>lock-parent</module>
    <module>lock-rest</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <swagger.version>2.6.1</swagger.version>
    <druid.version>1.1.5</druid.version><!--1.1.5 1.0.29-->
    <mysql-driver.version>5.1.39</mysql-driver.version>
    <mybatis-spring-boot-starter.version>1.2.0</mybatis-spring-boot-starter.version>
    <mybatis-generator-maven-plugin.version>1.3.5</mybatis-generator-maven-plugin.version>
    <fastjson-version>1.2.30</fastjson-version>
    <commons-lang.version>2.6</commons-lang.version>
    <junit.version>4.12</junit.version>
    <maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>
    <xinge.version>1.1.8</xinge.version>
    <spring-boot-starter-log4j.version>1.3.5.RELEASE</spring-boot-starter-log4j.version>
    <kaptcha-version>0.0.9</kaptcha-version>
    <velocity-version>1.7</velocity-version>
    <velocity-tools-version>2.0</velocity-tools-version>
    <jstl-version>1.2</jstl-version>
    <taglibs-version>1.1.2</taglibs-version>
    <freemarker-version>2.3.23</freemarker-version>
    <hibernate-validator-version>5.4.1.Final</hibernate-validator-version>
    <slf4j-version>1.7.19</slf4j-version>
    <log4j-version>1.2.17</log4j-version>
    <shiro-version>1.3.2</shiro-version>
    <docker.image.prefix>liumeidocker5</docker.image.prefix>
  </properties>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.1.RELEASE</version>
    <relativePath/>
  </parent>

  <dependencies>
    <!--spring-boot web 依赖-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <!--jar包，使用内嵌的tomcat ???  不是 要使用 ???-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-tomcat</artifactId>
      <scope>provided</scope><!--war 外部tomcat-->
    </dependency>
    <!-- 内嵌使用 tomcat  -->
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-jasper</artifactId>
      <version>7.0.47</version>
    </dependency>
    <!--servlet-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
      <!-- <scope>provided</scope>--><!--与tomcat 同步-->
    </dependency>
    <!--spring-boot 相关组件-->
    <!--springboot 热部署-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>
    <!--<dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
        <version>${spring-boot.version}</version>
    </dependency>-->
    <!--????spring context  上下文-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.3.7.RELEASE</version>
    </dependency>
    <!--junit 单元测试-->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>provided</scope>
    </dependency>
    <!--swagger2依赖-->
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>${swagger.version}</version>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
      <version>${swagger.version}</version>
    </dependency>
    <!-- fastjson-->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
      <version>${fastjson-version}</version>
    </dependency>
    <!--mybatis spring-boot -->
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>${mybatis-spring-boot-starter.version}</version>
    </dependency>
    <!--druid数据库连接池-->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
      <version>${druid.version}</version>
    </dependency>
    <!-- mysql-->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>${mysql-driver.version}</version>
    </dependency>

    <!--图片验证码-->
    <dependency>
      <groupId>com.github.axet</groupId>
      <artifactId>kaptcha</artifactId>
      <version>${kaptcha-version}</version>
    </dependency>
    <!-- 校验工具-->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>${hibernate-validator-version}</version>
    </dependency>
    <!--????-->
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>${commons-lang.version}</version>
    </dependency>
    <!--???? 上下文-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>4.3.7.RELEASE</version>
    </dependency>
    <!-- 本地信鸽推送-->
    <dependency>
      <groupId>com.github.xingePush</groupId>
      <artifactId>xinge</artifactId>
      <version>${xinge.version}</version>
    </dependency>
    <!--极光推送-->
    <dependency>
      <groupId>cn.jpush.api</groupId>
      <artifactId>jpush-client</artifactId>
      <version>3.3.0</version>
    </dependency>
    <!-- mina-->
    <dependency>
      <groupId>org.apache.mina</groupId>
      <artifactId>mina-core</artifactId>
      <version>2.0.16</version>
    </dependency>
    <!-- 添加POI excel -->
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>3.16</version>
    </dependency>
    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi-ooxml</artifactId>
      <version>3.16</version>
    </dependency>
    <!-- 添加iText 写pdf -->
    <dependency>
      <groupId>com.lowagie</groupId>
      <artifactId>itext</artifactId>
      <version>4.2.1</version>
    </dependency>
    <!--shiro-->
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-core</artifactId>
      <version>${shiro-version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-spring</artifactId>
      <version>${shiro-version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.shiro</groupId>
      <artifactId>shiro-ehcache</artifactId>
      <version>1.2.2</version>
    </dependency>
  </dependencies>
  <build>
    <finalName>rent</finalName><!--此时打成的包的名称应该和application.properties的server.context-path=/spring-boot保持一致-->
    <plugins>
      <!--maven 编译插件-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <!-- spring-boot 的maven插件   single jar-->
      <!--  <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <configuration>
            <fork>true</fork>
          </configuration>
        </plugin>-->
      <!-- <plugin>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-maven-plugin</artifactId>
         &lt;!&ndash; fork :  如果没有该项配置则devtools不会起作用，即应用不会restart&ndash;&gt;
         <configuration>
           <executable>true</executable>
           <fork>true</fork>
         </configuration>
         <executions>
           <execution>
             <goals>
               <goal>repackage</goal>
             </goals>
           </execution>
         </executions>
       </plugin>-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.1.1</version><!--&lt;!&ndash;3.0.0的插件 web.xml不存在问题&ndash;&gt;-->
        <configuration>
          <!-- &lt;!&ndash; 指定webapp 打包路径&ndash;&gt;-->
          <webappDirectory>${project.build.directory}</webappDirectory>
          <!-- &lt;!&ndash;指定war打包名称&ndash;&gt;-->
          <warName>rent</warName>
          <failOnMissingWebXml>false</failOnMissingWebXml><!--&lt;!&ndash;忽略没有web.xml打包报错&ndash;&gt;-->
        </configuration>
      </plugin>
      <!-- mybatis  generator 插件-->
      <plugin>
        <groupId>org.mybatis.generator</groupId>
        <artifactId>mybatis-generator-maven-plugin</artifactId>
        <version>${mybatis-generator-maven-plugin.version}</version>
        <configuration>
          <configurationFile>src/main/resources/config/mybatis-generator-config.xml</configurationFile>
          <verbose>false</verbose>
          <overwrite>true</overwrite>
        </configuration>
      </plugin>

      <!--Spotify 的 docker-maven-plugin 插件是用于构建 Maven 的 Docker Image-->
      <!--imageName指定了镜像的名字，本例为 waylau/docker-spring-boot
      ${docker.image.prefix} 为你在 docker官方仓库的用户名，如果你不需要上传镜像，随便填。
      dockerDirectory指定 Dockerfile 的位置
      resources是指那些需要和 Dockerfile 放在一起，在构建镜像时使用的文件，一般应用 jar 包需要纳入。本例，只需一个 jar 文件。-->
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>1.0.0</version>
        <configuration>
          <dockerHost>http://192.168.0.121:2375</dockerHost><!--远程服务器地址-->
          <!--<dockerHost>https://120.76.251.96:2376</dockerHost>-->
          <!--<dockerCertPath>C:\Users\Administrator\.docker\machine\machines\default</dockerCertPath>--><!--若远程服务器为https，则需添加证书-->
          <imageName>${docker.image.prefix}/${project.artifactId}</imageName> <!--lock/per-wifi--><!--${docker.image.prefix}/${project.artifactId}-->
          <dockerDirectory>src/main/docker</dockerDirectory>
          <!--简单的免 dockerFile 创建image-->
          <!--<baseImage>java:8</baseImage>--><!--centos-->
          <!--<volumes>/tmp</volumes>-->
          <!--<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
          <resources>
            <resource>
              <targetPath>/</targetPath>
              <directory>${project.build.directory}</directory>
              <include>/rent-v0.02.war</include>
            </resource>
          </resources>
          <!-- 以下两行是为了docker push到DockerHub使用的。 -->
          <serverId>docker-hub</serverId>
        </configuration>
      </plugin>

    </plugins>
    <resources>
      <!--静态资源过滤问题 ，src/main/resources 默认全部不过滤-->
      <resource>
        <directory>src/main/resources</directory>
        <!--过滤掉证书文件  后缀格式有哪些？？混乱-->
        <filtering>false</filtering>
        <includes>
          <include>*.p12</include>
          <include>*.cer</include>
          <include>*.crt</include>
          <include>*.pem</include>
          <include>*.key</include>
          <include>*.pfx</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>com/yifushidai/mapper/*</include>
          <include>config/*</include>
          <include>application.properties</include>
          <!--在Maven Project视图中指定profile就不会爆红了，在打包中使用mvn clean package -Dmaven.test.skip=true -P product,-p用来指定打包的profile-->
          <!--mvn clean package  -P local-->
          <include>application-${environment}.properties</include>
        </includes>
      </resource>
      <!-- src/main/java默认编译java文件，不包含静态资源， 此处配置src/main/java下编译静态资源，则src/main/resources 失效？-->
    </resources>
  </build>

  <!--生产环境-->
  <profiles>
    <profile>
      <id>dev</id>
      <properties>
        <environment>dev</environment>
      </properties>
    </profile>
    <profile>
      <id>product</id>
      <properties>
        <environment>product</environment>
      </properties>
    </profile>
  </profiles>
</project>